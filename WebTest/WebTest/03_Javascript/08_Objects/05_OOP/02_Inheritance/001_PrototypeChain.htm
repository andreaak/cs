<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Цепочка прототипов</title>

    <script>
        /*
        Классическое наследование:
            •Цепочка прототипов
            •Заимствование конструкторов
            •Заимствование конструктора и установка прототипа
            •Совместное использование прототипа
            •Временный конструктор
        */

        // родительский конструктор
        function Parent(name) {
            this.name = name || "Adam";
        }

        // дополнительное поведение добавленное в прототип.
        Parent.prototype.say = function () {
            document.write("Hello my name is ", this.name, "<br/>");
        }

        // пустой дочерний конструктор.
        function Child(name) {
            
        }

        inherit(Child, Parent);

        function inherit(C, P) {
            /*
            Самый простой способ реализовать наследование -
            создать объект с помощью родительского конструктора и приствоить
            его как прототип для дочернего конструктора.
            */
            C.prototype = new P();
        }

        var kid = new Child();
        document.write("kid.name: ", kid.name, "<br/>");
        kid.name = "Ivan";
        kid.say();


        /*
        Недостатки шаблона:
        Невозможно передать параметры от дочернего конструктора к родительскому
        */
        var kid = new Child("Ivan");
        kid.say();

        /*
        kid.name: Adam
        Hello my name is Ivan
        Hello my name is Adam
        */
    </script>
</head>
<body>
</body>
</html>
