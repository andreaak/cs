<!DOCTYPE htm>
<html>
<head>
    <title>Фильтр :contains(). Пример.</title>
    <script src="jquery-1.10.2.js"></script>
    <script>

        $(function () {

            //:contains('text') - фильтр, который выбирает все элементы, в которых встречается указанный текст.

            $('.search_button').on('click', search);

            function search() {
                var word = $('.search_item').val();
                $("p:contains(" + word + ")").css("background-color", "yellow");
            }

        });

    </script>
    <style>
        body {
            background-image: url(images/1720.png);
            text-align: justify;
        }

        h1 {
            color: whitesmoke;
            text-align: center;
        }

        .search_item {
            background: #b2e5ff;
        }

        p {
            width: 800px;
            padding: 10px;
            margin: 10px auto;
            font-size: 15px;
            background-color: #b2e5ff;
            font-family: Arial;
        }
    </style>
</head>
<body>
    <input class="search_item" type="text" value="" />
    <input class="search_button" type="button" value="Найти" />
    <h1>Простые правила простой вёрстки</h1>
    <p>Регулярно встречающаяся проблема — отсутствующая или искореженная во время довёрстки логика кода. Я говорю не о грубых ошибках, вроде пересекающихся и незакрытых тегов, а о совершенно отмороженном подходе большого количества начинающих верстальщиков к дальнейшей судьбе их работы. Мои слова могут показаться крамольными, но вёрстку небольших проектов, вроде сайтов-визиток, 30-60-ти страничных корпоративных сайтов и им подобных, нет нужды строить на базе css-«фреймворков», и модульная сетка для верстки таких сайтов тоже не требуется. Это современно, это показывает уровень ваших навыков и это действительно часто оправдано, но в данном случае это лишь усложнит чтение кода и увеличит дерево DOM. Как говорил старик Резо, не преумножай сущности сверх надобности.</p>
    <p>Куда проще и понятнее? Имена классов могут быть любыми, но крайне желательно, чтобы они не выбивались из общего стиля. Зачем писать news-box, homenewsletter? Особенно удивляет, если в следующем типовом блоке, например статей, класс называется articles-list или даже all_articles.</p>
    <p>Обратите внимание на универсальный класс item. Каждый волен обзывать его по разному, скажем box, это не принципиально, мне item кажется абсолютно нейтральным и понятным по смыслу всем, кому предстоит работать с кодом в дальнейшем — это просто блок из списка других таких же, как он.</p>
    <p>Также можно заметить перед общим блоком комментарий, дублирующий название класса. Это может показаться избыточным, но на деле сильно облегчает ориентирование в коде. В редакторах с подсветкой комментарии обычно выделяются серым цветом, и ими удобно предварять относительно крупные куски кода. <a href="http://habrahabr.ru/post/150306/">Продолжение на сайте habrahabr.ru</a></p>
</body>
</html>