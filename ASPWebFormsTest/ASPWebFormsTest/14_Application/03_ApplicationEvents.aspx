<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="03_ApplicationEvents.aspx.cs" 
    Inherits="ASPWebFormsTest._14_Application._03_ApplicationEvents" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title></title>
    <link href="~/Content/My.css" rel="stylesheet" />
</head>
<body>
    <p>
        Во время обработки запроса класс HttpApplication создает следующие события. 
        Эти события особенно интересны для разработчиков, которые хотят расширить класс HttpApplication.
    </p>
    <ol>
        <li>Проверка запроса, при которой проверяются сведения, отправленные обозревателем, и определяется, 
            содержит ли он потенциально вредоносную разметку. 
            Дополнительные сведения см. в разделах ValidateRequest и Общие сведения об использовании сценариев.</li>
        <li>Сопоставление URL-адреса, если какие-либо URL-адреса были сконфигурированы в разделе UrlMappingsSection файла Web.config.</li>
        <li>Создание события BeginRequest.</li>
        <li>Создание события AuthenticateRequest.</li>
        <li>Создание события PostAuthenticateRequest.</li>
        <li>Создание события AuthorizeRequest.</li>
        <li>Создание события PostAuthorizeRequest.</li>
        <li>Создание события ResolveRequestCache.</li>
        <li>Создание события PostResolveRequestCache.</li>
        <li>На основе расширения имени файла запрошенного ресурса (сопоставленного в файле конфигурации приложения) 
            выберите класс, реализующий объект IHttpHandler для обработки запроса. 
            Если объект (страница) запроса является производным от класса Page, и страница должна быть скомпилирована, 
            ASP.NET компилирует страницу до создания его экземпляра.</li>
        <li>Создание события PostMapRequestHandler.</li>
        <li>Создание события AcquireRequestState.</li>
        <li>Создание события PostAcquireRequestState.</li>
        <li>Создание события PreRequestHandlerExecute.</li>
        <li>Вызов метода ProcessRequest (или асинхронной версии IHttpAsyncHandler.BeginProcessRequest) 
            соответствующего класса IHttpHandler для запроса. Например, если запрашивается страница, 
            запрос обрабатывает текущий экземпляр страницы.</li>
        <li>Создание события PostRequestHandlerExecute.</li>
        <li>Создание события ReleaseRequestState.</li>
        <li>Создание события PostReleaseRequestState.</li>
        <li>Фильтрация ответов, если определено свойство Filter.</li>
        <li>Создание события UpdateRequestCache.</li>
        <li>Создание события PostUpdateRequestCache.</li>
        <li>Создание события EndRequest.</li>
        <li>Создание события PreSendRequestHeaders.</li>
        <li>Создание события PreSendRequestContent.</li>
    </ol>
    <p>
        Во время жизненного цикла приложение создает события, которые можно обработать, 
        или вызывают отдельные методы, которые можно переопределить. 
        Для обработки событий или методов приложения можно создать файл с именем Global.asax в корневом каталоге приложения.
    </p>
    <p>
        Если создан файл Global.asax, ASP.NET компилирует его в класс, 
        производный от класса <a href="https://msdn.microsoft.com/ru-ru/library/system.web.httpapplication.aspx">HttpApplication</a>, 
        и затем использует производный класс для представления приложения.
    </p>
    <p>
        Экземпляр класса HttpApplication обрабатывает только один запрос одновременно. 
        Это упрощает обработку события приложения, так как не требуется блокировать нестатические члены в классе приложения при обращении к ним. 
        Это также позволяет сохранять данные отдельного запроса в нестатических членах класса приложения. 
        Например, можно определить свойство в файле Global.asax и назначить ему значение отдельного запроса.
    </p>
    <p>
        ASP.NET автоматически привязывает события приложения к обработчикам в файле Global.asax с помощью соглашения об именах<br />
        <span class="bold">Application</span><span class="parameter">_событие</span>,<br />
        например, <span class="bold">Application_BeginRequest</span>. 
        Это такой же способ, с помощью которого методы страницы ASP.NET автоматически привязываются к событиям, 
        таким как событие <span class="bold">Page_Load</span> страницы.
    </p>
    <p>
        Методы <span class="bold">Application_Start</span> и <span class="bold">Application_End</span> -
        это специальные методы, не представляющие события HttpApplication.<br />
        ASP.NET вызывает их один раз за время жизни домена приложения не для каждого экземпляра HttpApplication.
    </p>

    <p>События, которые не привязаны к обработке запроса </p>
    <ul>
        <li>Start - Вызывается при старте веб приложения.</li>
        <li>End - Вызывается при завершении приложения. Приложение завершается, если к нему, 
            в течении 20 минут (по умолчанию), не было ни одного запроса.</li>
        <li>Error - В приложении возникло исключение, которое не обработали</li>
        <li>Session_Start - Срабатывает, когда начинается новая сессия. На сайт заходит новый посетитель.</li>
        <li>Session_End - Срабатывает при завершении сессии.</li>
    </ul>
    <p>События, которые происходят при получении каждого запроса. </p>
    <ul>
        <li>BeginRequest - Вызывается при каждом запросе.</li>
        <li>AuthenticateRequest - Срабатывает после аутентификации пользователя, 
            выполняющего запрос. (аутентификация - определение принадлежности к ресурсу, поиск учетной записи)</li>
        <li>AuthorizeRequest - Срабатывает после авторизации пользователя, выполняющего запрос. (авторизация - определение наличия прав доступа)</li>
        <li>ResolveRequestCache - Модули отвечающие за кэширование, извлекают ранее обработаный запрос, минуя вызов обработчика события.</li>
        <li>AcquireRequestState - Срабатывает после получения состояния сессии (Session state) для текущего запроса.</li>
        <li>PreRequestHandlerExecute - Срабатывает до того как начнется вызов обработчика.</li>
        <li>PostRequestHandlerExecute - Срабатывает после завершения обработчика события.</li>
        <li>ReleaseRequestState - Вызывается тогда, когда информация сеанса сериализуется из коллекции Session, 
            чтобы стать доступной в следующем запросе</li>
        <li>UpdateRequestCache - Вызывается перед добавлением информации в кэш выходных данных, если он был разрешен</li>
        <li>EndRequest - Последнее событие, которое происходит при обработке запроса.</li>
    </ul>

    <p>
        В следующей таблице перечислены некоторые события и методы, используемые во время жизненного цикла приложения. 
        Существует намного больше событий, чем перечислено, но они обычно не используются.
    </p>

    <table>
        <tbody>
            <tr>
                <th scope="col">Событие или метод</th>
                <th scope="col">Описание</th>
            </tr>
            <tr>
                <td data-th="Событие или метод">
                    <p><span class="input">Application_Start</span></p>
                </td>
                <td data-th="Описание">
                    <p>
                        Вызывается, когда запрашивается первый ресурс (например, страница) в приложении ASP.NET. 
                        Метод <span class="bold">Application_Start</span>вызывается только один раз во время жизненного цикла приложения. 
                        Этот метод можно использовать для выполнения начальных задач, 
                        таких как загрузка данных в кэш и инициализация статических значений.
                    </p>
                    <p>
                        Во время запуска приложения можно задать только статические данные. 
                        Не задавайте каких-либо данных экземпляра, так как они будут доступны только первому созданному экземпляру класса HttpApplication.
                    </p>
                </td>
            </tr>
            <tr>
                <td data-th="Событие или метод">
                    <p><span class="bold">Application_</span><i>event</i></p>
                </td>
                <td data-th="Описание">
                    <p>Создается в соответствующий момент в жизненном цикле приложения</p>
                    <p><span class="bold">Application_Error</span> может создаваться на любом этапе жизненного цикла приложения.</p>
                    <p>
                        <span class="bold">Application_EndRequest</span> является единственным событием,
                        которое гарантированно создается в каждом запросе, так как запрос может быть сокращенным. 
                        Например, если два модуля обрабатывают событие <span class="bold">Application_BeginRequest</span>, 
                        и первый создает исключение, 
                        <span class="bold">Application_BeginRequest</span> событие не будет вызвано для второго модуля. 
                        Однако метод <span class="input">Application_EndRequest</span> всегда вызывается, 
                        чтобы разрешить приложению очистить ресурсы.
                    </p>
                </td>
            </tr>
            <tr>
                <td data-th="Событие или метод">
                    <p><a href="https://msdn.microsoft.com/ru-ru/library/system.web.httpapplication.init.aspx">Init</a></p>
                </td>
                <td data-th="Описание">
                    <p>Вызывается один раз для каждого экземпляра класса HttpApplication после создания всех модулей.</p>
                </td>
            </tr>
            <tr>
                <td data-th="Событие или метод">
                    <p><a href="https://msdn.microsoft.com/ru-ru/library/system.web.httpapplication.dispose.aspx">Dispose</a></p>
                </td>
                <td data-th="Описание">
                    <p>
                        Вызывается до уничтожения экземпляра приложения. 
                        Этот метод можно использовать для отключения вручную от любых неуправляемых ресурсов.
                    </p>
                </td>
            </tr>
            <tr>
                <td data-th="Событие или метод">
                    <p><span class="input">Application_End</span></p>
                </td>
                <td data-th="Описание">
                    <p>Вызывается один раз в течение жизненного цикла приложения до его выгрузки.</p>
                </td>
            </tr>
        </tbody>
    </table>
</body>
</html>
