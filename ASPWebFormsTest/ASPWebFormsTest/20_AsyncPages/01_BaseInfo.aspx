<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="01_BaseInfo.aspx.cs" Inherits="ASPWebFormsTest._20_AsyncPages._01_BaseInfo" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title></title>
</head>
<body>
    <p>
        <strong>Обычная страница</strong><br />
        Каждый входящий запрос назначается потоку пула ASP.NET. 
        Этот запрос обслуживается обработчиком HTTP выбранным на основе типа запроса и настроек в config файле. 
        Поток, из пула потоков, не освободится до тех пор, пока метод ProcessRequest не завершит выполнение.
    </p>
    <img src="page.png" />
    <p>
        Если для запроса нет свободного потока для обработки - запрос становиться в очередь, 
        когда очередь достигнет 1000 запросов (по умолчанию) 
        пользователи начнут получать ответ 503 &ldquo;Server too busy&rdquo;
    </p>
    <p>
        <strong>Асинхронная страница</strong><br />
        Каждый входящий запрос, направленный асинхронной странице, назначается потоку пула ASP.NET 
        в котором выполняется код страницы до события PreRender. 
        После этого события создается новый поток из пула приложения, 
        который начинает выполнять назначенную ему задачу, 
        при этом поток ASP.NET возвращаетсяв пул и продолжает обрабатывать новые запросы. 
        Когда новый поток из пула приложений закончит асинхронную задачу, 
        жизненный цикл страницы продолжится с события PreRenderComplete.
    </p>
    <img src="async_page.png" />

    <p>
        Таким образом, поток из пула ASP.NET будет блокироваться на минимальное время 
        и сможет обрабатывать больше входящих запросов.
    </p>
    <img src="life_cycle.png" />

    <p>Задачи, которые лучше всего подходят для асинхронных страниц связаны с ожиданием данных, а не с вычислениями:</p>
    <ul>
        <li>Доступ к удаленным источникам данных</li>
        <li>Вызовы удаленных веб сервисов</li>
        <li>Внешним устройствам</li>
    </ul>
    <p>Для того что бы создать асинхронную страницу необходимо: </p>
    <ol>
        <li>Добавить свойство Async=&rdquo;True&rdquo; в директиву Page</li>
        <li>В обработчике события Load вызвать метод AddOnPreRenderCompleteAsync 
            и зарегистрировать обработчики начала и завершения асинхронной операции</li>
        <li>В обработчике начала асинхронной операции, необходимо запустить асинхронную операцию 
            и вернуть интерфейс IAsyncResult. Для запуска асинхронной задачи 
            можно использовать методы системных классов, например, BeginGetResponse класса WebRequest и т.д. 
            или можно воспользоваться методом BeginInvoke подходящего по сигнатуре делегата.</li>
        <li>В обработчике завершения асинхронной операции необходимо выполнить обработку результатов 
            полученных в результате работы потока запущенного в предыдущем методе</li>
    </ol>
    <p>Для того что бы создать страницу на основе асинхронных задач (PageAsyncTask): </p>
    <ol>
        <li>Создать методы
            <ul>
                <li>который будет выполнять запуск нового потока,</li>
                <li>который будет выполнять обработку завершение асинхронной операции</li>
                <li>метод который будет выполнятся в случае таймаута (опционально)</li>
            </ul>
        </li>

        <li>Создать экземпляр класса PageAsyncTask и передать в конструктор ссылки на методы созданые ранее.</li>
        <li>Зарегистрировать задачи с помощью метода страницы RegisterAsyncTask</li>
        <li>Все зарегистрированные задачи запустятся после события PreRender</li>
        <li>Если вызвать метод ExecuteRegisteredAsyncTask все задачи запустятся немедленно, 
            но при этом будет заблокирован потока из пула потоков IIS. 
            Если данный метод будет вызван, то запуск задач после события PreRender не произойдет.</li>
    </ol>
    <p>
        <br />
        Преимущества использования PageAsyncTask
    </p>
    <ul>
        <li>Возможность использования TPL и async/await</li>
        <li>Возможность установить Timeout для асинхронной задачи</li>
        <li>Возможность запустить асинхронную задачу в любой момент времени до события PreRender</li>
    </ul>
    <p>
        Способы создания асинхронных страниц
    </p>
    <h4>1.Регистрация обработчиков событий начала и завершения асинхронной операции
    </h4>
    <ul>
        <li>AddOnPreRenderCompleteAsync(BeginEventHandlerBegin, EndEventHandlerEnd)</li>
        <li>BeginEventHandler - метод, в котором необходимо запустить новую асинхронную задачу</li>
        <li>EndEventHandler - метод, в котором обрабатывается завершение асинхронной задачи</li>
    </ul>
    <h4>2.Регистрация асинхронных задач для страницы PageAsyncTask
    </h4>
    <ul>
        <li>Возможность использования TPL и async/await</li>
        <li>Возможность установить Timeout для асинхронной задачи</li>
        <li>Возможность запустить асинхронную задачу в любой момент времени до события PreRender</li>
    </ul>
</body>
</html>
