@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>V_01_BaseInfo</title>
    <link href="~/Content/My.css" rel="stylesheet" />
</head>
<body>
    <p>
        Фильтр - способ внедрить дополнительную логику в конвейер обработки запроса,
        которая будет выполнятся до или после метода действия.
        Фильтры предоставляют простой способ реализации сквозной ответственности (cross-cutting concerns),
        например, ведение журнала ошибок, авторизация, кэширование
    </p>
    <h4>Базовые типы фильтров</h4>
    <table>
        <tr>
            <th>Тип фильтра</th>
            <th>Интерфейс</th>
            <th>Реализация по умолчанию</th>
            <th>Описание</th>
        </tr>
        <tr>
            <td>Авторизация</td>
            <td>IAuthorizationFilter</td>
            <td>AuthorizeAttribute</td>
            <td>
                Запускается первым перед методом действия или любым другим фильтром. 
                Используется для проверки наличия прав доступа к ресурсу
            </td>
        </tr>
        <tr>
            <td>Действие</td>
            <td>IActionFilter</td>
            <td>ActionFilterAttribute</td>
            <td>Запускается до и после метода действия контроллера</td>
        </tr>
        <tr>
            <td>Результат</td>
            <td>IResultFilter</td>
            <td>ActionFilterAttribute</td>
            <td>Запускается до и после кода результата</td>
        </tr>
        <tr>
            <td>Исключение</td>
            <td>IExceptionFilter</td>
            <td>HandleErrorAttribute</td>
            <td>Запускается в случае необработанного исключения</td>
        </tr>
    </table>

    <h4>Фильтры действия</h4>
    <ul>
        <li>OnActionExecuting - метод запускается до вызова метода действия контроллере.</li>
        <li>OnActionExecuted - метод запускается после вызова метода действия в контроллере</li>
    </ul>
    <img src="~/Content/Images/action_filter.jpg" />

    <h4>Фильтры результата</h4>
    <ul>
        <li>OnResultExecuting - вызывается до выполнения кода результата.</li>
        <li>OnResultExecuted - вызывается после выполнения кода результата.</li>
    </ul>
    <img src="~/Content/Images/result_filter.jpg" />

    <p>
        Для создания пользовательского фильтра результата необходимо создать обычный атрибут,
        но при этом реализовать методы интерфейса IActionFilter.
        При создании атрибута результата используется интерфейс IResultFilter.
    </p>
    <p>
        Другим способом создания фильтров является наследование класса ActionFilterAttribute
        при этом необходимо переопределить только необходимые методы базового класса, реализовывать все методы интерфейсов уже не нужно.
    </p>
    <p>
        ActionFilterAttribute - базовый класс реализовывающий два интерфейса для создания фильтров результатов и фильтров действий.
        Примером применения пользовательских фильтров может быть - фильтр для легирования исключений, которые произошли в методе действия
        или в коде результата, фильтры для замеров скорости работы, фильтры, выполняющие кэширование результатов.
    </p>

    <p>
        <strong>Глобальный фильтр</strong> - фильтр, который срабатывает при обращении к любому методу действия в приложении.
        Для создания глобального фильтра в файле App_Start\FilterConfig.cs необходимо вызвать метод
    </p>
    <p class="code">
        GlobalFilters.Filters.Add(new КонструкторФильтра());
    </p>

    <h4>HandleErrorAttribute</h4>
    <p class="code">[HandleError(ExceptionType=typeof(NullReferenceException), View="SpecialError")]</p>
    <p>
        Фильтр срабатывает в случае возникновения исключения и возвращает пользователю в ответ указанное представление с текстом ошибки. По умолчанию представление- Shares/Error.cshtml
    </p>
    <p>Исключение может поступить со следующих источников:</p>
    <ul>
        <li>Фильтр другого вида (авторизации, действия или результата)</li>
        <li>Метода действия</li>
        <li>Выполнения результата действия</li>
    </ul>
    <p class="code">[HandleError(ExceptionType=typeof(NullReferenceException), View="SpecialError")]</p>
    <p>
        при указании таких настроек фильтр сработает следующим образом - при возникновении исключения NullReferenceException
        будет возвращено представление SpecialError.
    </p>
    <p>
        Для того что бы фильтр HandleError срабатывал, в файле web.config должна быть добавлена запись
    </p>
    <p class="code">&lt;customErrors mode=&rdquo;On&rdquo;&gt;&lt;/customErrors&gt;.</p>
    <p>
        В противном случае, при возникновении исключения, будет возвращается стандартная страница с описанием исключения и трассировкой (&laquo;Желтая страница смерти&raquo;).
    </p>

    <h4>AuthorizeAttribute</h4>
    <p class="code">[Authorize(Users="user1, user2", Roles="admin, manager")]</p>
    <p>
        Именованные параметры:<br />
        Users - список пользователей, которым разрешен доступ к методу действия.<br />
        Roles - список ролей, которым разрешен доступ к методу действия. Пользователь должен принадлежать,
        по крайней мере, к одной перечисленной роли.
    </p>
</body>
</html>
