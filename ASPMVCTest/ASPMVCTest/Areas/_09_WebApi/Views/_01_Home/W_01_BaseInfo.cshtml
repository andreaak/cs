@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>W_01_BaseInfo</title>
    <link href="~/Content/My.css" rel="stylesheet" />
</head>
<body>
    <p>
        <strong>ASP.NET Web API</strong> - Framework для создания HTTP сервисов.
        Позволяет создавать RESTсервисы (если придерживаться всех требований REST архитектуры)
    </p>

    <h4>Основные принципы REST:</h4>
    <ul>
        <li>Client-Server - разделение ответственности</li>
        <li>Stateles - общение между клиентом и сервером не подразумевает хранения состояния</li>
        <li>
            Cacheable - клиенты могут кэшировать ответы. Ответ должен явно или не явно указывать клиенту
            может ли тот его кэшировать.
        </li>
        <li>
            Layered System - клиент не может точно знать подключен ли он на прямую к серверу
            или пользуется промежуточным прокси сервером.
        </li>
        <li>
            Uniform Interface - унифицированный интерфейс между клиентом и сервером основанный на URI
            и использования HTTP метода для определения операции, которую необходимо выполнить на сервере.
        </li>
    </ul>
    <p>Метод API контроллера будет выполнен в следующих случаях:</p>
    <ul>
        <li>Имя запускаемого метода совпадает с именем HTTPзапроса.</li>
        <li>Метод декорирован атрибутом [AcceptVerbs]</li>
        <li>Начало имени метода начинается с имени HTTP запроса.</li>
    </ul>

    <p>
        <strong>URI(Uniform Resource Identifier)</strong> - это идентификатор ресурса, адрес по которому находится информация.<br />
        Пример URI - <span class="code">http://www.microsoft.com/uk-ua/default.aspx</span>
    </p>

    <table>
        <tr>
            <th>Имя метода HTTP</th>
            <th>Тип взаимодействия</th>
        </tr>
        <tr>
            <td>GET</td>
            <td>Получение источника,idempotent</td>
        </tr>
        <tr>
            <td>POST</td>
            <td>Создание нового источника</td>
        </tr>
        <tr>
            <td>PUT</td>
            <td>Обновление существующего источника,idempotent</td>
        </tr>
        <tr>
            <td>DELETE</td>
            <td>Удаление источника,idempotent</td>
        </tr>
    </table>

    <p>
        <strong>Idempotent</strong> - не зависит от количества вызовов. Результат всегда одинаковый.
    </p>

    <p>
        Для того что бы HTTP методы могли работать при запуске в IIS Express необходимо поменять файл конфигурации,
        который находится по пути <span class="code">C:\\Users\&lt;UserName&gt;\Documents\IISExpress\config\applicationhost.config</span>
    </p>
    <p>
        <span class="code">
            &lt;add name="ExtensionlessUrl-Integrated-4.0" path="*." verb="GET,HEAD,POST,DEBUG"
            type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0"
            responseBufferLimit="0" /&gt;
        </span><br />
        В атрибут verb элемента указанного выше, необходимо добавить необходимые глаголы.
    </p>

    <p>
        Если на компьютере установлен WebDAV Publishing его нужно удалить через "программы и компоненты".
        http://stackoverflow.com/questions/3946283/enabling-html-put-method-on-iis-7-5
    </p>

    <h4>Привязка данных</h4>
    <p>
        Так-же как и в ASP.NET MVC, Web API автоматически связывает данные
        из URI и тела сообщения с параметрами методов.
    </p>
    Для выбора источника данных используются атрибуты:
    <ul>
        <li><strong>[FromBody]</strong> - можно применить только к одному параметру</li>
        <li><strong>[FromUri]</strong> - поиск значений для декорированного параметра происходит в QueryString</li>
    </ul>

    <h4>Статус коды HTTP</h4>

    <table>
        <tr>
            <th>Шаблон</th>
            <th>HTTP Метод</th>
            <th>Описание</th>
            <th>Статус</th>
            <th>Содержимое ответа</th>
        </tr>
        <tr>
            <td rowspan="3">/{key}</td>
            <td rowspan="3">GET</td>
            <td rowspan="3">Получение источника по ключу</td>
            <td>200 - OK</td>
            <td>Источник по ключу</td>
        </tr>
        <tr>
            <td>400 - Bad Request</td>
            <td>Пустой, или текст ошибки</td>
        </tr>
        <tr>
            <td>404 - Not Found</td>
            <td>Пустой</td>
        </tr>
        <tr>
            <td rowspan="4">/</td>
            <td rowspan="4">POST</td>
            <td rowspan="4">Добавление источника в коллекцию</td>
            <td>201 - Created</td>
            <td>Добавленный источник</td>
        </tr>
        <tr>
            <td>204 - No Content</td>
            <td>Пустой</td>
        </tr>
        <tr>
            <td>400 - Bad Request</td>
            <td>Пустой, или текст ошибки</td>
        </tr>
        <tr>
            <td>409 - Conflict</td>
            <td>Пустой, или текст ошибки</td>
        </tr>
        <tr>
            <td rowspan="5">/{key}</td>
            <td rowspan="5">PUT</td>
            <td rowspan="5">Обновление источника в коллекции</td>
            <td>200 - OK</td>
            <td>Измененный источник</td>
        </tr>
        <tr>
            <td>204 - No Content</td>
            <td>Пустой</td>
        </tr>
        <tr>
            <td>400 - Bad Request</td>
            <td>Пустой, или текст ошибки</td>
        </tr>
        <tr>
            <td>404 - Not Found</td>
            <td>Пустой, или текст ошибки</td>
        </tr>
        <tr>
            <td>409 - Conflict</td>
            <td>Пустой, или текст ошибки</td>
        </tr>
        <tr>
            <td rowspan="5">/{key}</td>
            <td rowspan="5">DELETE</td>
            <td rowspan="5">Удаление источника из коллекции</td>
            <td>200 - OK</td>
            <td>Измененный источник</td>
        </tr>
        <tr>
            <td>204 - No Content</td>
            <td>Пустой</td>
        </tr>
        <tr>
            <td>400 - Bad Request</td>
            <td>Пустой, или текст ошибки</td>
        </tr>
        <tr>
            <td>404 - Not Found</td>
            <td>Пустой, или текст ошибки</td>
        </tr>
        <tr>
            <td>409 - Conflict</td>
            <td>Пустой, или текст ошибки</td>
        </tr>
    </table>

    <h4>Основные соглашения w3</h4>

    <table>
        <tr>
            <th>Тип запроса HTTP</th>
            <th>Основные соглашения w3 по типу ответа сервера</th>
        </tr>
        <tr>
            <td>GET/{key}</td>
            <td>
                <ul>
                    <li>должен возвращать ресурс по указанному ключу, если он существует</li>
                    <li>должен возвращать код 400, если ключ не правильный</li>
                    <li>должен возврящать 404, если ключа не существует</li>
                </ul>
            </td>
        </tr>
        <tr>
            <td>POST/</td>
            <td>
                <ul>
                    <li>должен создавать источник и возвращать код 201 с заголовком Location</li>
                    <li>должен возвращать 400, если данные не верные</li>
                    <li>должен возвращать 409 в случае конфликта с другими данными</li>
                </ul>
            </td>
        </tr>
        <tr>
            <td>PUT/{key}</td>
            <td>
                <ul>
                    <li>
                        должен обновлять источник и возвращать код 200
                        с измененными данними может создавать источник и возвращать код 201
                    </li>
                    <li>должен возвращать 400, если данные либо ключ не верные</li>
                    <li>должен возвращать 404, если сервер не позволяет создавать данные с помощью метода PUT</li>
                </ul>
            </td>
        </tr>
        <tr>
            <td>DELETE/{key}</td>
            <td>
                <ul>
                    <li>может возвращать ответ 200 с данными, которые удалились, либо 204 без данных</li>
                    <li>стоит возвращать 400, если ключ не верный</li>
                    <li>должен возврящать 404, если ключа не существует</li>
                </ul>
            </td>
        </tr>
    </table>

    <h4>Управления сообщениями HTTP</h4>
    <p>
        Классы HttpRequestMessage и HttpResponceMessage дают разработчику низкоуровневый контроль HTTP сообщения.
        С помощью этих классов, например, можно изменять заголовки, формировать нужный код ответа.
    </p>
    <p class="code">return Request.CreateResponse(HttpStatusCode.OK, _fruits[id]);</p>


</body>
</html>
