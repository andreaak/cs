@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>MVC Basic Info</title>
</head>
<body>

    <p>
        <strong>ASP.NET MVC</strong>- платформа для разработки веб-приложений
        созданная корпорацией Microsoft, включающая в себе эффективность архитектуры
        &laquo;модель - представление - контроллер&raquo;
    </p>
    <img src="~/Content/Images/ASPPlatform.png" />
    <p>
        <strong>Model-View-Controller</strong> - (MVC, &laquo;Модель-представление-контроллер&raquo;) - шаблон проектирования,
        с помощью которого модель данных приложения,
        пользовательский интерфейс и взаимодействие с пользователем
        разделены на три отдельных компонента так, что модификация одного из компонентов
        оказывает минимальное воздействие на остальные. Данная схема проектирования
        часто используется для построения архитектурного
    </p>
    <img src="~/Content/Images/MVCInteraction.png" />

    <h4>Модель(model)</h4>
    <p>
        Содержит или представляет данные и бизнес правила.<br />
        <ul>
            <li>
                Модель представлений - объекты представляющие данные,
                которые передаются между представлением и контроллером
            </li>
            <li>
                Модель предметной области -объекты представляющие данные,
                а также операции, преобразования и правила манипуляции данными
            </li>
        </ul>
    </p>

    <h4>Представление (view)</h4>
    <p>
        Отвечает за визуализацию некоторой части модели в виде пользовательского интерфейса.
        В MVC приложении представлено *.cshtml файлами
    </p>

    <h4>Контроллер (controller)</h4>
    <p>
        Обработка поступающих запросов, выполнение операции с моделью
        и выбор представления для визуализации интерфейса.
    </p>
    <img src="~/Content/Images/MVCRequestLifeCycle.jpg" />

    <h4>Преимущества WebForms:</h4>
    <ul>
        <li>Большое количество серверных элементов управления</li>
        <li>Хранения состояния между обращениями на сервер</li>
        <li>События элементов управления</li>
        <li>Поддержка графической и декларативной разработки</li>
    </ul>

    <h4>Недостатки WebForms:</h4>
    <ul>
        <li>Ресурсоемкость ViewState</li>
        <li>Сложный жизненный цикл страницы</li>
        <li>Ограниченность контроля над HTML разметкой</li>
        <li>Нарушенная абстракция. (скрытый HTTP и HTML)</li>
        <li>Низкая тестируемость</li>
    </ul>

    <h4>Преимущества MVC:</h4>
    <ul>
        <li>
            Расширяемость<br />
            Для каждого компонента MVC Framework разработчику представляют три возможности:
            <ul>
                <li>Использование стандартного компонента</li>
                <li>Порождение подкласса от стандартной реализации</li>
                <li>Полная замена компонента новой реализацией интерфейса</li>
            </ul>
        </li>
        <li>
            Жесткий контроль над HTML и HTTP
            <ul>
                <li>Генерация разметки которая соответствует стандартам</li>
                <li>Отсутствие ViewState</li>
                <li>Полный контроль над запросами</li>
            </ul>
        </li>
        <li>
            Тестируемость<br />
            Разнесение различных задач приложения по разным,
            независимым друг от друга частям программного обеспечения,
            позволяет строить легко тестируемые приложения.
        </li>
        <li>
            Мощная система маршрутизации<br />
            /products/Page.aspx?prod_id=19833&amp;category=services&amp;lang=ru --&gt; /ru/products/services/19833
        </li>
    </ul>

    <h4>Структура проекта:</h4>
    <p>
        <strong>App_Data</strong> - директория для баз данных и других источников данных
        (доступ открыт только приложению).В этот каталог помещаются приватные данные
        такие как XML документы или базы данных. Веб-сервер IIS не будет обслуживать
        содержимое этой директории.
    </p>
    <p>
        <strong>Content</strong> - директория для статического контента -
        картинок, стилей и т.д. Это не обязательное соглашения.
        Хранить статический контент можно в любой другой директории.
    </p>
    <p><strong>Controllers</strong> - директория для контроллеров приложения.</p>
    <p><strong>Models</strong> - директория для моделей приложения</p>
    <p>
        <strong>Scripts</strong> - Каталог для хранения JavaScript файлов.
        По умолчанию Visual Studio добавляет файлы JQuery и Microsoft AJAX.
    </p>
    <p>
        <strong>Views</strong> - В этом каталоге хранятся представления
        или частичные представления, обычно сгруппированные вместе в папках
        с именем контроллера, с которым они связаны.
    </p>
    <p>
        <strong>/Views/Shared</strong> - В этом каталоге находятся представления
        являющиеся не специфичными для какого-либо контроллера.
    </p>
    <p>
        <strong>Global.asax</strong> - Глобальный класс приложения.
        В данном файле находится код конфигурирующий приложение,
        а также любой код который должен выполнятся при старте или остановке приложения.
    </p>
    <p><strong>RouteConfig.cs</strong> - настройка маршрутизации в приложении.</p>

    <h4> Соглашения первого вида</h4>
    <p>
        Предположения о том, как должна выглядеть структура проекта.<br />
        Например:<br />
        В папке Script должны находится JavaScript сценарии<br />
        В папке Content изображения, CSS файлы и т.д.
    </p>

    <h4>Соглашения второго вида</h4>
    <p>
        Классы контроллера должны иметь имена, заканчивающиеся словом Controller.<br />
        Например, ProductController, AdminController, HomeController<br />
        Представления должны располагаться в папке /Views/Имя_контроллера<br />
        Например, представления для ProductControllerдолжны находится в каталоге /Views/Product
    </p>
</body>
</html>
